import spacy

# Carrega modelo com vetores semÃ¢nticos
nlp = spacy.load("pt_core_news_lg")

# Frases de referÃªncia para cada INTENT
intents_examples = {
    "1": ["quero ver meu histÃ³rico escolar", "histÃ³rico", "cursadas",  "disciplinas que jÃ¡ cursei", "lista de matÃ©rias feitas", "histÃ³rico escolar", "CR", "CRA", "coeficiente de rendimento", "qual o meu CR"],
    "2": ["qual o horÃ¡rio das aulas", "horÃ¡rio", "que horas", "ver calendÃ¡rio das aulas", "quando sÃ£o minhas aulas" , "horÃ¡rios das aulas", "que horas sÃ£o minhas aulas", "horÃ¡rio das disciplinas", "horÃ¡rio do semestre", "horÃ¡rio do curso", "horÃ¡rio do perÃ­odo"],
    "3": ["ver minhas notas", "notas", "provas"  "quero saber minhas provas", "quanto tirei na avaliaÃ§Ã£o", "desempenho", "notas das disciplinas", "notas do semestre", "notas do curso", "notas do perÃ­odo", "notas do histÃ³rico"],
    "4": ["preciso de um comprovante de matrÃ­cula", "matrÃ­cula", "quero declaraÃ§Ã£o da faculdade", "declaraÃ§Ã£o de vÃ­nculo", "comprovante de matrÃ­cula", "declaraÃ§Ã£o de matrÃ­cula", "declaraÃ§Ã£o", "comprovante"],
    "5": ["trancar uma matÃ©ria", "trancar", "trancamento", "informaÃ§Ãµes sobre trancamento", "trancar disciplina", "suspender matÃ©ria",  "anular matÃ©ria", "desistir de uma matÃ©ria", "desistir de disciplina", "trancar matrÃ­cula"],
    "6": ["datas importantes do perÃ­odo", "calendÃ¡rio acadÃªmico", "datas das aulas",  "quais sÃ£o os prazos", "informaÃ§Ãµes do calendÃ¡rio acadÃªmico" , "datas", "calendÃ¡rio", "feriados", "dias", "quando acaba o perÃ­odo", "datas importantes", "datas do semestre", "datas do curso", "datas do perÃ­odo"],
    "7": ["quero falar com a secretÃ¡ria", "secretÃ¡ria", "preciso de ajuda com atendimento", "entrar em contato com a secretaria", "atendimento", "acessar a secretaria", "falar com a secretaria", "secretaria", "falar com alguÃ©m da secretaria", "falar com a coordenaÃ§Ã£o", "falar com o coordenador", "falar com alguÃ©m da coordenaÃ§Ã£o"],
    "8": ["dÃºvidas sobre estÃ¡gio", "estÃ¡gio",  "como funciona o estÃ¡gio obrigatÃ³rio", "orientaÃ§Ãµes de estÃ¡gio", "fazer estÃ¡gio", "estÃ¡gio obrigatÃ³rio", "estÃ¡gio nÃ£o obrigatÃ³rio", "estÃ¡gio curricular", "estÃ¡gio supervisionado", "estagio", "estagiar", "dinheiro"],
    "9": ["como conseguir bolsa de permanÃªncia", "bolsa estudantil",  "ajuda financeira estudantil", "bolsas para continuar o curso", "ajuda financeira", "bolsa de permanÃªncia", "bolsa de estudo", "bolsa de assistÃªncia estudantil", "bolsa de permanÃªncia"],
    "10":["quero ser monitor", "informaÃ§Ãµes sobre iniciaÃ§Ã£o cientÃ­fica", "bolsa IC ou monitoria", "monitoria", "iniciaÃ§Ã£o cientÃ­fica","ic", "informaÃ§Ãµes sobre ic", "monitoria", "bolsa de monitoria", "bolsa de iniciaÃ§Ã£o cientÃ­fica"]
}

intents_map = {
    "1": "Consultar histÃ³rico escolar",
    "2": "Verificar horÃ¡rios de aulas",
    "3": "Consultar notas de disciplinas",
    "4": "Solicitar declaraÃ§Ã£o de matrÃ­cula",
    "5": "Obter informaÃ§Ãµes sobre trancamento de disciplinas",
    "6": "InformaÃ§Ãµes sobre datas dentro do perÃ­odo",
    "7": "Falar com a secretaria",
    "8": "Receber orientaÃ§Ãµes para estÃ¡gio",
    "9": "Solicitar informaÃ§Ãµes sobre bolsas de permanÃªncia",
    "10": "Solicitar informaÃ§Ãµes sobre bolsas financeiras (Monitoria, IC)"
}

# TÃ³picos gerais agrupando intents
grupos = {
    "matÃ©rias": ["2", "3"],
    "matricula": ["1", "4"],
    "datas": ["5", "6"],
    "bolsa": ["8", "9", "10"],
    "secretaria": ["7"]
}

def detectar_intent_por_similaridade(mensagem_usuario):
    doc_user = nlp(mensagem_usuario.lower())
    max_sim = 0
    melhor_intent = None
    for intent_id, exemplos in intents_examples.items():
        for exemplo in exemplos:
            doc_exemplo = nlp(exemplo)
            similaridade = doc_user.similarity(doc_exemplo)
            if similaridade > max_sim:
                max_sim = similaridade
                melhor_intent = intent_id
    if max_sim > 0.70:
        return melhor_intent, max_sim, doc_user
    return None, max_sim, doc_user

def perguntar_grupo_baseado_similaridade(doc_usuario):
    max_sim = 0
    grupo_mais_provavel = None
    for grupo in grupos:
        doc_grupo = nlp(grupo)
        sim = doc_usuario.similarity(doc_grupo)
        if sim > max_sim:
            max_sim = sim
            grupo_mais_provavel = grupo

    if grupo_mais_provavel:
        resposta = input(f"Sua dÃºvida Ã© sobre {grupo_mais_provavel}? (sim/nÃ£o/sair): ").strip().lower()
        if resposta == "sair":
            print("Bot: Encerrando. AtÃ© logo! ğŸ‘‹")
            exit()
        if resposta == "sim":
            intents = grupos[grupo_mais_provavel]
            for i in intents:
                resposta2 = input(f"VocÃª quer: {intents_map[i]}? (sim/nÃ£o/sair): ").strip().lower()
                if resposta2 == "sair":
                    print("Bot: Encerrando. AtÃ© logo! ğŸ‘‹")
                    exit()
                if resposta2 == "sim":
                    print(f"âœ… INTENT {i}: {intents_map[i]}")
                    return
        print("Bot: NÃ£o consegui identificar com clareza. Vamos tentar novamente.")
        descobrir_intent_por_perguntas()


def descobrir_intent_por_perguntas():
    for grupo, intents in grupos.items():
        resposta = input(f"Sua dÃºvida Ã© sobre {grupo}? (sim/nÃ£o/sair): ").strip().lower()
        if resposta == "sair":
            print("Bot: Encerrando. AtÃ© logo! ğŸ‘‹")
            exit()
        if resposta == "sim":
            for i in intents:
                resp = input(f"VocÃª quer: {intents_map[i]}? (sim/nÃ£o/sair): ").strip().lower()
                if resp == "sair":
                    print("Bot: Encerrando. AtÃ© logo! ğŸ‘‹")
                    exit()
                if resp == "sim":
                    print(f"âœ… INTENT {i}: {intents_map[i]}")
                    return
    print("Bot: Desculpe, nÃ£o consegui entender sua dÃºvida.")

def chatbot():
    print("ğŸ¤– OlÃ¡! Sou a assistente virtual da sua faculdade.")
    print("Digite sua dÃºvida (ou 'sair' para encerrar):")
    while True:
        mensagem = input("VocÃª: ")
        if mensagem.lower() in ["sair", "exit", "fim"]:
            print("Bot: AtÃ© logo! ğŸ‘‹")
            break

        intent, confianca, doc_user = detectar_intent_por_similaridade(mensagem)
        if intent:
            resposta = input(f"Bot: VocÃª quis dizer: {intents_map[intent]}? (sim/nÃ£o/sair): ").strip().lower()
            if resposta == "sim":
                print(f"âœ… INTENT {intent}: {intents_map[intent]}")
            elif resposta == "sair":
                print("Bot: AtÃ© logo! ğŸ‘‹")
                break
            else:
                print("Bot: Tudo bem, vamos tentar entender melhor com base no que vocÃª falou...")
                perguntar_grupo_baseado_similaridade(doc_user)
        else:
            print("Bot: NÃ£o entendi bem sua dÃºvida. Vamos por partes.")
            descobrir_intent_por_perguntas()

# Rodar
if __name__ == "__main__":
    chatbot()
